/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∑–≤–æ–Ω–∫–∞
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å AI Translation Service –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–µ—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

const aiTranslationService = require('./ai-translation-service');

class AudioProcessor {
  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
    this.sampleRate = 16000; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è OpenAI API
    this.channels = 1; // –ú–æ–Ω–æ
    this.bitDepth = 16; // 16 –±–∏—Ç
    
    // –ö–æ–ª–±–µ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    this.translationCallbacks = new Map(); // roomId -> callback
    
    // –§–ª–∞–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.loggingEnabled = true;
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ
   * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã –∑–≤–æ–Ω–∫–∞
   * @param {ArrayBuffer} audioData - –°—ã—Ä—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
   * @param {Array<string>} recipients - –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
   * @param {boolean} translate - –§–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processAudio(userId, roomId, audioData, recipients, translate = false) {
    try {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ —Å–µ—Ä–≤–∏—Å AI-Translation
      if (translate) {
        // –ü–æ–ª—É—á–∞–µ–º callback –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
        const callback = this.getTranslationCallback(roomId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await aiTranslationService.processAudio(userId, audioData, callback);
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
      return {
        success: true,
        userId: userId,
        roomId: roomId,
        processed: translate,
        recipients: recipients.length
      };
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`, 'error');
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
   * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã –∑–≤–æ–Ω–∫–∞
   * @returns {Function} - Callback —Ñ—É–Ω–∫—Ü–∏—è
   */
  getTranslationCallback(roomId) {
    if (this.translationCallbacks.has(roomId)) {
      return this.translationCallbacks.get(roomId);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
    const callback = (userId, result) => {
      this.handleTranslationResult(roomId, userId, result);
    };
    
    this.translationCallbacks.set(roomId, callback);
    return callback;
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ AI-Translation
   * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã –∑–≤–æ–Ω–∫–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–µ—á—å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞
   * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
   */
  handleTranslationResult(roomId, userId, result) {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (result.type === 'translation' || result.type === 'transcript') {
      this.log(`[–ö–æ–º–Ω–∞—Ç–∞ ${roomId}] [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}] ${result.type}: ${result.text}`, 'info');
    } else if (result.type === 'audio') {
      this.log(`[–ö–æ–º–Ω–∞—Ç–∞ ${roomId}] [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}] –ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞`, 'debug');
    } else if (result.type === 'error') {
      this.log(`[–ö–æ–º–Ω–∞—Ç–∞ ${roomId}] [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${result.message}`, 'error');
    }
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–≤–æ–Ω–∫–∞
    // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
  }
  
  /**
   * –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (debug, info, warn, error)
   */
  log(message, level = 'info') {
    if (!this.loggingEnabled) return;
    
    const timestamp = new Date().toISOString();
    
    switch (level.toLowerCase()) {
      case 'debug':
        console.debug(`[${timestamp}] [AudioProcessor] üîç DEBUG: ${message}`);
        break;
      case 'info':
        console.info(`[${timestamp}] [AudioProcessor] ‚ÑπÔ∏è INFO: ${message}`);
        break;
      case 'warn':
        console.warn(`[${timestamp}] [AudioProcessor] ‚ö†Ô∏è WARN: ${message}`);
        break;
      case 'error':
        console.error(`[${timestamp}] [AudioProcessor] ‚ùå ERROR: ${message}`);
        break;
      default:
        console.log(`[${timestamp}] [AudioProcessor] ${message}`);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω-—ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
const audioProcessor = new AudioProcessor();
module.exports = audioProcessor;
